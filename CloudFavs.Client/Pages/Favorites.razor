@page "/favorites"
@page "/favorites/folder/{FolderId:guid}"
@inject HttpClient Http

@if (favorites == null || folders == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>@SelectedFolder.Name Favorites</h1>

    <AddFavoritePopup @ref="AddFavoritePopup" SelectedFolder="SelectedFolder" OnNewFavoriteSaved="OnNewFavoriteAdded"></AddFavoritePopup>
    <AddFolderPopup @ref="AddFolderPopup" OnNewFolderSaved="OnNewFolderAdded"></AddFolderPopup>

    <button class="btn btn-primary" @onclick="@(() => AddFavoritePopup.IsVisible = true)">Add Favorite</button>

    <button class="btn btn-outline-primary float-right" @onclick="@(() => AddFolderPopup.IsVisible = true)">+</button>
    <text>&nbsp;</text>
    <DxComboBox CssClass="float-right" Data="@folders" TextFieldName="Name" @bind-SelectedItem="SelectedFolder"></DxComboBox>

    <p>&nbsp;</p>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>URI</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var favorite in favorites)
            {
                <FavoriteRow @key="favorite" Favorite="favorite"
                             OnFavoriteDeleted="OnFavoriteDeleted"
                             OnFavoriteUpdated="OnFavoriteUpdated"></FavoriteRow>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Guid FolderId { get; set; }

    private List<FavoriteDTO> favorites;
    private List<FolderDTO> folders;
    private FolderDTO selectedFolder;
    protected FolderDTO SelectedFolder
    {
        get => selectedFolder;
        set
        {
            selectedFolder = value;
            GetFavorites();
            InvokeAsync(StateHasChanged);
        }
    }

    protected AddFavoritePopup AddFavoritePopup { get; set; }
    protected AddFolderPopup AddFolderPopup { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await GetFolders();

        if (FolderId != new Guid())
            SelectedFolder = folders.FirstOrDefault(f => f.Id == FolderId);
        else
            SelectedFolder = folders.FirstOrDefault();

        await GetFavorites();
    }

    protected async Task GetFolders()
    {
        Console.WriteLine("[Getting folders]");
        folders = (await Http.GetFromJsonAsync<List<FolderDTO>>("https://localhost:44373/api/folder/all/66A5DB8A-47F7-48A5-98F8-80B34452BF34"))
            .OrderBy(f => f.Name).ToList();
    }

    protected async Task<FolderDTO> GetFolder(Guid folderId)
    {
        Console.WriteLine($"[Getting folder: {folderId}]");

        return await Http.GetFromJsonAsync<FolderDTO>("https://localhost:44373/api/folder/{folderId}");
    }

    protected async Task GetFavorites()
    {
        Console.WriteLine($"[Getting favorites for folder: {selectedFolder.Id}]");
        favorites = (await Http.GetFromJsonAsync<List<FavoriteDTO>>
            ($"https://localhost:44373/api/favorite/folder/{selectedFolder.Id}"))
            .OrderBy(f => f.Name).ToList();
        InvokeAsync(StateHasChanged);
    }

    protected async Task OnFavoriteDeleted(Guid favoriteId)
    {
        await GetFavorites();
    }

    protected async Task OnFavoriteUpdated(Guid favoriteId)
    {
        await GetFavorites();
    }

    protected async Task OnNewFavoriteAdded(FavoriteDTO favorite)
    {
        if (favorite.FolderId != SelectedFolder.Id)
            SelectedFolder = await Http.GetFromJsonAsync<FolderDTO>($"https://localhost:44373/api/folder/{favorite.FolderId}");
        else
            await GetFavorites();
    }

    protected async Task OnNewFolderAdded(FolderDTO folder)
    {
        Console.WriteLine($"[Added new folder: {folder.Id}]");
        await GetFolders();
        SelectedFolder = await Http.GetFromJsonAsync<FolderDTO>($"https://localhost:44373/api/folder/{folder.Id}");
    }
}
