@inject HttpClient Http

<DxPopup HeaderText="Add Favorite" @bind-Visible="@IsVisible">
    <Content>
        <EditForm Model="@Favorite" OnValidSubmit="@OnSave">

            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="favoriteNameInput">Favorite Name: </label>
                <InputText id="favoriteNameInput" class="form-control" @bind-Value="@Favorite.Name" placeholder="Enter the favorite's name"></InputText>
                <ValidationMessage For="@(() => Favorite.Name)" />
            </div>

            <div class="form-group">
                <label for="favoriteUriInput">Favorite URI: </label>
                <InputText id="favoriteUriInput" class="form-control" @bind-Value="@Favorite.Uri"></InputText>
                <ValidationMessage For="@(() => Favorite.Uri)" />
            </div>

            <div class="form-group">
                <label for="folderSelect">Folder: </label>
                <InputSelectGuid id="folderSelect" class="form-control" @bind-Value="Favorite.FolderId">
                    @foreach (var folder in folders)
                    {
                        <option value="@folder.Id">@folder.Name</option>
                    }
                </InputSelectGuid>
                <ValidationMessage For="@(() => Favorite.FolderId)" />
            </div>

            <button class="btn btn-success" type="submit">Save</button>
            <button class="btn btn-light" @onclick="@(() => IsVisible = false)">Cancel</button>
        </EditForm>
    </Content>
</DxPopup>

@code{
    private List<FolderDTO> folders;
    public FavoriteDTO Favorite { get; set; } = new FavoriteDTO();

    [Parameter]
    public EventCallback<FavoriteDTO> OnNewFavoriteSaved { get; set; }

    [Parameter]
    public FolderDTO SelectedFolder { get; set; }

    public bool IsVisible { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetFolders();
    }

    protected override void OnParametersSet()
    {
        Favorite.FolderId = SelectedFolder.Id;
        Favorite.Uri = "https://";
    }

    protected async Task GetFolders()
    {
        folders = (await Http.GetFromJsonAsync<List<FolderDTO>>("https://localhost:44373/api/folder/all/66A5DB8A-47F7-48A5-98F8-80B34452BF34"))
            .OrderBy(f => f.Name).ToList();
    }

    protected async Task OnSave()
    {
        IsVisible = false;

        // Temporarily hard-coding meta data
        Favorite.OwnerId = Guid.Parse("66A5DB8A-47F7-48A5-98F8-80B34452BF34");

        Console.WriteLine("[Adding new favorite]");
        await Http.PostAsJsonAsync<FavoriteDTO>($"https://localhost:44373/api/favorite", Favorite);
        await OnNewFavoriteSaved.InvokeAsync(Favorite);
        Favorite = new FavoriteDTO();
    }
}
