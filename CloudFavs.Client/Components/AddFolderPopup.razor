@inject HttpClient Http

<DxPopup HeaderText="Add Folder" @bind-Visible="@IsVisible">
    <Content>
        <EditForm Model="@Folder" OnValidSubmit="@OnSave">

            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="folderNameInput">Folder Name: </label>
                <InputText id="folderNameInput" class="form-control" @bind-Value="Folder.Name" placeholder="Enter the folder's name"></InputText>
                <ValidationMessage For="@(() => Folder.Name)" />
            </div>

            <button class="btn btn-success" type="submit">Save</button>
            <button class="btn btn-light" @onclick="@(() => IsVisible = false)">Cancel</button>
        </EditForm>
    </Content>
</DxPopup>

@code{
    public FolderDTO Folder { get; set; } = new FolderDTO();

    [Parameter]
    public EventCallback<FolderDTO> OnNewFolderSaved { get; set; }

    public bool IsVisible { get; set; }

    protected async Task OnSave()
    {
        IsVisible = false;

        // Temporarily hard-coding meta data
        Folder.OwnerId = Guid.Parse("66A5DB8A-47F7-48A5-98F8-80B34452BF34");

        Console.WriteLine("[Adding new folder]");
        var response = await Http.PostAsJsonAsync<FolderDTO>($"https://localhost:44373/api/folder", Folder);
        Folder = await response.Content.ReadFromJsonAsync<FolderDTO>();
        await OnNewFolderSaved.InvokeAsync(Folder);
        Folder = new FolderDTO();
    }
}
